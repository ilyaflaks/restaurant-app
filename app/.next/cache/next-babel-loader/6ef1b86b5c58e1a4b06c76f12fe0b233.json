{"ast":null,"code":"var _jsxFileName = \"/Users/ilyaflaks/Desktop/Boot Camps/MIT xPro/back-end-part3/Restauraunt-App/client/components/dishes.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useRouter } from \"next/router\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport { useState, useContext } from \"react\";\nimport AppContext from \"./context\";\nimport { Button, Card, CardBody, CardImg, CardText, CardTitle, Row, Col } from \"reactstrap\";\n\nfunction Dishes({\n  restaurantID\n}) {\n  console.log(\"in Dishes component\");\n  console.log(\"restaurantID\");\n  console.log(restaurantID); //const [restaurantID, setRestaurantID] = useState();\n\n  const {\n    addItem\n  } = useContext(AppContext);\n  const GET_RESTAURANT_DISHES = gql`\n    query ($id: ID!) {\n      restaurant(id: $id) {\n        id\n        name\n        dishes {\n          id\n          name\n          description\n          price\n        }\n      }\n    }\n  `;\n  const router = useRouter();\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_RESTAURANT_DISHES, {\n    variables: {\n      id: restaurantID\n    }\n  });\n  if (loading) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 21\n    }\n  }, \"ERROR here\");\n  if (!data) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 21\n    }\n  }, \"Not found\");\n  let restaurant = data.restaurant;\n  console.log(\"inside dishes\");\n  console.log(restaurant);\n  console.log(restaurant.dishes);\n  console.log(\"restaurantID: \" + restaurantID);\n\n  if (restId > 0) {\n    console.log(\"inside the if block, restaurant matches the search query \"); //if a restaurant matches the search query the id should be 1, 2, 3 or 4, etc\n    //map through the dishes of this restaurant and return cards with image, name, descripton, price\n\n    return __jsx(React.Fragment, null, restaurant.dishes.map(res => __jsx(Col, {\n      xs: \"6\",\n      sm: \"4\",\n      style: {\n        padding: 0\n      },\n      key: res.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }\n    }, __jsx(Card, {\n      style: {\n        margin: \"0 10px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }\n    }, __jsx(CardBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 15\n      }\n    }, __jsx(CardTitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }\n    }, res.name), __jsx(CardText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }\n    }, res.description)), __jsx(\"div\", {\n      className: \"card-footer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 15\n      }\n    }, __jsx(Button // color=\"info\"\n    , {\n      outline: true,\n      color: \"primary\",\n      onClick: () => addItem(res),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }\n    }, \"+ Add To Cart\"))))));\n  } else {\n    return __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 12\n      }\n    }, \" No Dishes\");\n  }\n}\n\nexport default Dishes;","map":{"version":3,"sources":["/Users/ilyaflaks/Desktop/Boot Camps/MIT xPro/back-end-part3/Restauraunt-App/client/components/dishes.js"],"names":["useRouter","gql","useQuery","useState","useContext","AppContext","Button","Card","CardBody","CardImg","CardText","CardTitle","Row","Col","Dishes","restaurantID","console","log","addItem","GET_RESTAURANT_DISHES","router","loading","error","data","variables","id","restaurant","dishes","restId","map","res","padding","margin","name","description"],"mappings":"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","sourcesContent":["import { useRouter } from \"next/router\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport { useState, useContext } from \"react\";\nimport AppContext from \"./context\";\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardImg,\n  CardText,\n  CardTitle,\n  Row,\n  Col,\n} from \"reactstrap\";\nfunction Dishes({ restaurantID }) {\n  console.log(\"in Dishes component\");\n  console.log(\"restaurantID\");\n  console.log(restaurantID);\n\n  //const [restaurantID, setRestaurantID] = useState();\n  const { addItem } = useContext(AppContext);\n\n  const GET_RESTAURANT_DISHES = gql`\n    query ($id: ID!) {\n      restaurant(id: $id) {\n        id\n        name\n        dishes {\n          id\n          name\n          description\n          price\n        }\n      }\n    }\n  `;\n\n  const router = useRouter();\n\n  const { loading, error, data } = useQuery(GET_RESTAURANT_DISHES, {\n    variables: { id: restaurantID },\n  });\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>ERROR here</p>;\n  if (!data) return <p>Not found</p>;\n\n  let restaurant = data.restaurant;\n  console.log(\"inside dishes\");\n  console.log(restaurant);\n  console.log(restaurant.dishes);\n  console.log(\"restaurantID: \" + restaurantID);\n\n  if (restId > 0) {\n    console.log(\"inside the if block, restaurant matches the search query \");\n    //if a restaurant matches the search query the id should be 1, 2, 3 or 4, etc\n    //map through the dishes of this restaurant and return cards with image, name, descripton, price\n    return (\n      <>\n        {restaurant.dishes.map((res) => (\n          <Col xs=\"6\" sm=\"4\" style={{ padding: 0 }} key={res.id}>\n            <Card style={{ margin: \"0 10px\" }}>\n              {/* <CardImg\n                top={true}\n                style={{ height: 150, width: 150 }}\n                src={`http://localhost:1337${res.image.url}`}\n              /> */}\n              <CardBody>\n                <CardTitle>{res.name}</CardTitle>\n                <CardText>{res.description}</CardText>\n              </CardBody>\n              <div className=\"card-footer\">\n                <Button\n                  // color=\"info\"\n                  outline\n                  color=\"primary\"\n                  onClick={() => addItem(res)}\n                >\n                  + Add To Cart\n                </Button>\n              </div>\n            </Card>\n          </Col>\n        ))}\n      </>\n    );\n  } else {\n    return <h1> No Dishes</h1>;\n  }\n}\nexport default Dishes;\n"]},"metadata":{},"sourceType":"module"}