{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { useContext, useState } from \"react\";\nimport Head from \"next/head\";\nimport AppContext from \"../components/context\";\nimport Home from \"./index\";\nimport Layout from \"../components/layout\";\nimport Cookie from \"js-cookie\";\n\nfunction MyApp(props) {\n  var {\n    cart,\n    addItem,\n    removeItem,\n    user,\n    setUser\n  } = useContext(AppContext);\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    cart: cart\n  });\n  const {\n    Component,\n    pageProps\n  } = props;\n  console.log(\"AppContext:\");\n  console.log(AppContext);\n  const appContext = useContext(AppContext);\n  console.log(\"appContext\");\n  console.log(appContext);\n  console.log(\"_app appContext.isAuthenticated\");\n  console.log(appContext.isAuthenticated);\n  const authed = appContext.isAuthenticated;\n  console.log(\"authed\");\n  console.log(authed);\n  console.log(\"_app appContext.user\");\n  console.log(appContext.user);\n  console.log(\"_app appContext.currentUser\");\n  console.log(appContext.currentUser); ////Not called anywhere yet\n\n  setUser = (currentUser, isAuthenticated) => {\n    //    setState({ user });\n    console.log(\"setUser in app called\");\n    console.log(\"currentUser (we are in setUser in app btw): \");\n    console.log(currentUser);\n\n    if (currentUser) {\n      isAuthenticated = true;\n    }\n\n    console.log(\"isAuthenticated (we are in setUser in app btw): \");\n    console.log(isAuthenticated);\n  }; ////empty function exported from context. Defined here\n\n\n  addItem = item => {\n    console.log(\"in AddItem in _app\");\n    let {\n      items\n    } = state.cart;\n    console.log(\"items: \");\n    console.log(items);\n    console.log(\"items length: \" + items.length); //state stores the items and the qty locally in state.cart = items\n    //check for item already in cart\n    //if not in cart, add item if item is found increase quanity ++\n\n    let foundItem = true;\n\n    if (items.length > 0) {\n      console.log(\"inside the if block\");\n      foundItem = items.find(i => i.id === item.id);\n      console.log(\"foundItem: \" + foundItem); //console.log(\"i.id: \" + i.id);\n\n      console.log(\"item.id: \" + item.id); //if cart is not empty, search for item matching the id of the item that called addItem\n      //assign it to foundItem. If none found foundItem becomes false\n\n      if (!foundItem) foundItem = false;\n    } else {\n      //if cart is empty:\n      foundItem = false;\n    }\n\n    console.log(`Found Item value: ${JSON.stringify(foundItem)}`); // if item is not new, add to cart, set quantity to 1\n\n    if (!foundItem) {\n      //foundItem is false when cart is empty or when item.id doesnt match whats in it\n      //set quantity property to 1\n      console.log(\"if block, foundItem is falsy\");\n      let temp = JSON.parse(JSON.stringify(item));\n      console.log(\"temp:\");\n      console.log(temp); //you can't set item quantity directly because this is React\n\n      temp.quantity = 1;\n      var newCart = {\n        items: [...state.cart.items, temp],\n        //copy of item is added to cart with QTY of 1\n        total: state.cart.total + item.price\n      };\n      setState({\n        cart: newCart\n      }); //state updated\n\n      console.log(`Total items: ${JSON.stringify(newCart)}`);\n    } else {\n      //foundItem is truthy, meaning there are things in the cart and the item added matches whats in the cart\n      // we already have it so just increase quantity ++\n      console.log(\"else block, foundItem is truthy meaning there are things in the cart and the item added matches whats in the cart\");\n      console.log(`Total so far:  ${state.cart.total}`); //not sure if newCart is in scope of this else statement but it works...\n\n      newCart = {\n        items: items.map(item => {\n          //map through the items in the cart, match the id's\n          if (item.id === foundItem.id) {\n            //Object.assign merges the obejcts after {} with same props into a new obj,\n            //in this case it will copy item, and update it's quantity to be +1 of what it was\n            //this will essentially return a new object with an update QTY\n            return Object.assign({}, item, {\n              quantity: item.quantity + 1\n            });\n          } else {\n            //not sure if this condition is necessary since we are already in the else statement for the truthiness of foundItem\n            return item;\n          }\n        }),\n        total: state.cart.total + item.price\n      };\n    }\n\n    setState({\n      cart: newCart\n    }); // problem is this is not updated yet\n\n    console.log(`state reset to cart:${JSON.stringify(state)}`);\n  }; ////removeItem is also in the context with no functionality\n\n\n  removeItem = item => {\n    //similar to above, items is whats already in the cart\n    let {\n      items\n    } = state.cart; //check for item already in cart\n\n    const foundItem = items.find(i => i.id === item.id); //find the item for which id of the item added matches\n\n    if (foundItem.quantity > 1) {\n      //if item added is already in the cart and the QTY is greater than 1, map through the items\n      var newCart = {\n        //key \"items\" is a copy of the item matching the id with a QTY increased by one.\n        items: items.map(item => {\n          if (item.id === foundItem.id) {\n            return Object.assign({}, item, {\n              quantity: item.quantity - 1\n            });\n          } else {\n            return item;\n          }\n        }),\n        total: state.cart.total - item.price\n      }; //console.log(`NewCart after remove: ${JSON.stringify(newCart)}`)\n    } else {\n      // only 1 item matchng the id in the cart so remove the whole item\n      console.log(`Try remove item ${JSON.stringify(foundItem)}`); //find the index of the item matching the id of foundItem and splice it out\n\n      const index = items.findIndex(i => i.id === foundItem.id);\n      items.splice(index, 1); //not sure if this is a problem with React to uopdate item directly\n\n      var newCart = {\n        items: items,\n        total: state.cart.total - item.price\n      };\n    }\n\n    setState({\n      cart: newCart\n    });\n  };\n\n  return (//app.js provides the values for this contxt. Otherwise it's empty values. Cart and Dishes all import this context\n    //Cart accesses  cart, addItem, removeItem, Dishes accesses addItem\n    __jsx(AppContext.Provider, {\n      value: {\n        cart: state.cart,\n        addItem: addItem,\n        removeItem: removeItem,\n        isAuthenticated: false,\n        user: false,\n        setUser: setUser\n      }\n    }, __jsx(Head, null, __jsx(\"link\", {\n      rel: \"stylesheet\",\n      href: \"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\",\n      integrity: \"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\",\n      crossOrigin: \"anonymous\"\n    })), __jsx(Layout, null, __jsx(Component, pageProps)))\n  );\n}\n\nexport default MyApp;","map":null,"metadata":{},"sourceType":"module"}