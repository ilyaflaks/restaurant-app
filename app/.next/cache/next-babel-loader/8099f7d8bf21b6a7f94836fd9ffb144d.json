{"ast":null,"code":"var _jsxFileName = \"/Users/ilyaflaks/Desktop/Boot Camps/MIT xPro/back-end-part3/Restauraunt-App/client/components/restaurantList.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { gql, useQuery } from \"@apollo/client\";\nimport Dishes from \"./dishes\";\nimport { useContext, useEffect, useState } from \"react\"; //import \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport AppContext from \"./context\";\nimport { Button, Card, CardBody, CardImg, CardText, CardTitle, Container, Row, Col } from \"reactstrap\";\n\nfunction RestaurantList(props) {\n  const {\n    0: restaurantID,\n    1: setRestaurantID\n  } = useState(0);\n  const {\n    cart\n  } = useContext(AppContext);\n  const {\n    0: state,\n    1: setState\n  } = useState(cart);\n  const {\n    0: showDishes,\n    1: setShowDishes\n  } = useState(false);\n  const GET_RESTAURANTS = gql`\n    query Restaurants {\n      restaurants {\n        id\n        name\n        description\n        dishes {\n          name\n          price\n          description\n        }\n      }\n    }\n  `;\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_RESTAURANTS);\n  if (loading) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 21\n    }\n  }, \"ERROR\");\n  if (!data) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 21\n    }\n  }, \"Not found\");\n  console.log(`Query Data:`);\n  console.log(data.restaurants);\n  let searchQuery = data.restaurants.filter(res => {\n    return res.name.toLowerCase().includes(props.search);\n  }) || [];\n\n  function findDishes(id) {\n    let selectedRestaurant = data.restaurants.filter(res => res.id === id);\n    console.log(\"selectedRestaurant: \");\n    console.log(selectedRestaurant);\n    console.log(\"selectedRestaurant dishes: \");\n    let resDish = selectedRestaurant.dishes;\n    console.log(\"resDish\");\n    console.log(resDish);\n  }\n\n  if (searchQuery.length > 0) {\n    const restList = searchQuery.map(res => __jsx(Col, {\n      xs: \"6\",\n      sm: \"4\",\n      key: res.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 7\n      }\n    }, __jsx(Card, {\n      style: {\n        margin: \"0 0.5rem 20px 0.5rem\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }\n    }, __jsx(CardBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }\n    }, __jsx(CardTitle, {\n      tag: \"h5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }\n    }, res.name), __jsx(CardText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }\n    }, res.description)), __jsx(\"div\", {\n      className: \"card-footer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }\n    }, __jsx(Button, {\n      color: \"info\",\n      onClick: () => {\n        setRestaurantID(res.id);\n        console.log(res.id);\n        console.log(restaurantID);\n        findDishes(res.id);\n        setShowDishes(true);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }\n    }, \"Explore\"))))); /////\n    // function DishesList() {\n    //       console.log(restaurantID);\n    //       const renderDishes = data.restaurants.filter(\n    //         (entry) => entry.id === restaurantID\n    //       );\n    //       console.log(renderDishes);\n    // .map((item, index) => {\n    //   console.log(\"item\");\n    //   console.log(item);\n    //   console.log(\"item.dishes\");\n    //   console.log(item.dishes);\n    //   console.log(\"item.dishes.name\");\n    //   console.log(item.dishes.name);\n    //   return (\n    //     <Card key={index}>\n    //       <CardTitle>{item.dishes.name}</CardTitle>\n    //       <CardText>{item.dishes.price}</CardText>\n    //       <CardText>{item.dishes.description}</CardText>\n    //     </Card>\n    //   );\n    // });\n    // return renderDishes;\n    // }\n    //\n\n    return __jsx(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 7\n      }\n    }, __jsx(Row, {\n      xs: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }\n    }, restList));\n  } else {\n    return __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 12\n      }\n    }, \" No Restaurants Found\");\n  }\n}\n\nexport default RestaurantList;","map":{"version":3,"sources":["/Users/ilyaflaks/Desktop/Boot Camps/MIT xPro/back-end-part3/Restauraunt-App/client/components/restaurantList.js"],"names":["gql","useQuery","Dishes","useContext","useEffect","useState","AppContext","Button","Card","CardBody","CardImg","CardText","CardTitle","Container","Row","Col","RestaurantList","props","restaurantID","setRestaurantID","cart","state","setState","showDishes","setShowDishes","GET_RESTAURANTS","loading","error","data","console","log","restaurants","searchQuery","filter","res","name","toLowerCase","includes","search","findDishes","id","selectedRestaurant","resDish","dishes","length","restList","map","margin","description"],"mappings":"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","sourcesContent":["import { gql, useQuery } from \"@apollo/client\";\nimport Dishes from \"./dishes\";\nimport { useContext, useEffect, useState } from \"react\";\n\n//import \"bootstrap/dist/css/bootstrap.min.css\";\nimport AppContext from \"./context\";\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardImg,\n  CardText,\n  CardTitle,\n  Container,\n  Row,\n  Col,\n} from \"reactstrap\";\n\nfunction RestaurantList(props) {\n  const [restaurantID, setRestaurantID] = useState(0);\n  const { cart } = useContext(AppContext);\n  const [state, setState] = useState(cart);\n  const [showDishes, setShowDishes] = useState(false);\n  const GET_RESTAURANTS = gql`\n    query Restaurants {\n      restaurants {\n        id\n        name\n        description\n        dishes {\n          name\n          price\n          description\n        }\n      }\n    }\n  `;\n\n  const { loading, error, data } = useQuery(GET_RESTAURANTS);\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>ERROR</p>;\n  if (!data) return <p>Not found</p>;\n  console.log(`Query Data:`);\n  console.log(data.restaurants);\n\n  let searchQuery =\n    data.restaurants.filter((res) => {\n      return res.name.toLowerCase().includes(props.search);\n    }) || [];\n\n  function findDishes(id) {\n    let selectedRestaurant = data.restaurants.filter((res) => res.id === id);\n    console.log(\"selectedRestaurant: \");\n    console.log(selectedRestaurant);\n    console.log(\"selectedRestaurant dishes: \");\n    let resDish = selectedRestaurant.dishes;\n\n    console.log(\"resDish\");\n    console.log(resDish);\n  }\n  if (searchQuery.length > 0) {\n    const restList = searchQuery.map((res) => (\n      <Col xs=\"6\" sm=\"4\" key={res.id}>\n        <Card style={{ margin: \"0 0.5rem 20px 0.5rem\" }}>\n          {/* <CardImg\n            top={true}\n            style={{ height: 200 }}\n            src={`http://localhost:1337` + res.image.url}\n          /> */}\n          <CardBody>\n            <CardTitle tag=\"h5\">{res.name}</CardTitle>\n            <CardText>{res.description}</CardText>\n          </CardBody>\n          <div className=\"card-footer\">\n            <Button\n              color=\"info\"\n              onClick={() => {\n                setRestaurantID(res.id);\n                console.log(res.id);\n                console.log(restaurantID);\n                findDishes(res.id);\n                setShowDishes(true);\n              }}\n            >\n              Explore\n            </Button>\n          </div>\n        </Card>\n      </Col>\n    ));\n\n    /////\n    // function DishesList() {\n    //       console.log(restaurantID);\n    //       const renderDishes = data.restaurants.filter(\n    //         (entry) => entry.id === restaurantID\n    //       );\n    //       console.log(renderDishes);\n    // .map((item, index) => {\n    //   console.log(\"item\");\n    //   console.log(item);\n    //   console.log(\"item.dishes\");\n    //   console.log(item.dishes);\n    //   console.log(\"item.dishes.name\");\n    //   console.log(item.dishes.name);\n    //   return (\n    //     <Card key={index}>\n    //       <CardTitle>{item.dishes.name}</CardTitle>\n    //       <CardText>{item.dishes.price}</CardText>\n    //       <CardText>{item.dishes.description}</CardText>\n    //     </Card>\n    //   );\n    // });\n\n    // return renderDishes;\n    // }\n\n    //\n\n    return (\n      <Container>\n        <Row xs=\"3\">{restList}</Row>\n        {/* \n        <Row xs=\"3\">{renderDishes(restaurantID)}</Row>\n        <Row xs=\"3\">{renderDishes(restId)}</Row> */}\n        {/* {showDishes && <DishesList />} */}\n      </Container>\n    );\n  } else {\n    return <h1> No Restaurants Found</h1>;\n  }\n}\n\nexport default RestaurantList;\n"]},"metadata":{},"sourceType":"module"}