{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _jsxFileName = \"/Users/ilyaflaks/Desktop/Boot Camps/MIT xPro/back-end-part3/week28/setting-up-graphql-with-apollo_starter/pages/_app.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useContext, useState } from \"react\";\nimport Head from \"next/head\";\nimport AppContext from \"../components/context\";\nimport Home from \"./index\";\nimport Layout from \"../components/layout\";\nimport Cookie from \"js-cookie\";\n\nfunction MyApp(props) {\n  _s();\n\n  var _useContext = useContext(AppContext),\n      cart = _useContext.cart,\n      addItem = _useContext.addItem,\n      removeItem = _useContext.removeItem,\n      user = _useContext.user,\n      setUser = _useContext.setUser;\n\n  var _useState = useState({\n    cart: cart\n  }),\n      state = _useState[0],\n      setState = _useState[1];\n\n  var Component = props.Component,\n      pageProps = props.pageProps; ////Not called anywhere yet\n\n  setUser = function setUser(user) {\n    setState({\n      user: user\n    });\n  }; ////\n\n\n  addItem = function addItem(item) {\n    var items = state.cart.items; //state stores the items and the qty locally in state.cart = items\n    //check for item already in cart\n    //if not in cart, add item if item is found increase quanity ++\n\n    var foundItem = true;\n\n    if (items.length > 0) {\n      foundItem = items.find(function (i) {\n        return i.id === item.id;\n      }); //if cart is not empty, search for item matching the id of the item that called addItem\n      //assign it to foundItem. If none found foundItem becomes false\n\n      if (!foundItem) foundItem = false;\n    } else {\n      //if cart is empty:\n      foundItem = false;\n    }\n\n    console.log(\"Found Item value: \".concat(JSON.stringify(foundItem))); // if item is not new, add to cart, set quantity to 1\n\n    if (!foundItem) {\n      //foundItem is false when cart is empty or when item.id doesnt match whats in it\n      //set quantity property to 1\n      var temp = JSON.parse(JSON.stringify(item)); //you can't set item quantity directly because this is React\n\n      temp.quantity = 1;\n      var newCart = {\n        items: [].concat(_toConsumableArray(state.cart.items), [temp]),\n        //copy of item is added to cart with QTY of 1\n        total: state.cart.total + item.price\n      };\n      setState({\n        cart: newCart\n      }); //state updated\n\n      console.log(\"Total items: \".concat(JSON.stringify(newCart)));\n    } else {\n      //foundItem is truthy, meaning there are things in the cart and the item added matches whats in the cart\n      // we already have it so just increase quantity ++\n      console.log(\"Total so far:  \".concat(state.cart.total)); //not sure if newCart is in scope of this else statement but it works...\n\n      newCart = {\n        items: items.map(function (item) {\n          //map through the items in the cart, match the id's\n          if (item.id === foundItem.id) {\n            //Object.assign merges the obejcts after {} with same props into a new obj,\n            //in this case it will copy item, and update it's quantity to be +1 of what it was\n            //this will essentially return a new object with an update QTY\n            return Object.assign({}, item, {\n              quantity: item.quantity + 1\n            });\n          } else {\n            //not sure if this condition is necessary since we are already in the else statement for the truthiness of foundItem\n            return item;\n          }\n        }),\n        total: state.cart.total + item.price\n      };\n    }\n\n    setState({\n      cart: newCart\n    }); // problem is this is not updated yet\n\n    console.log(\"state reset to cart:\".concat(JSON.stringify(state)));\n  };\n\n  removeItem = function removeItem(item) {\n    //similar to above, items is whats already in the cart\n    var items = state.cart.items; //check for item already in cart\n\n    var foundItem = items.find(function (i) {\n      return i.id === item.id;\n    }); //find the item for which id of the item added matches\n\n    if (foundItem.quantity > 1) {\n      //if item added is already in the cart and the QTY is greater than 1, map through the items\n      var newCart = {\n        //key \"items\" is a cope of the item matching the id with a QTY increased by one.\n        items: items.map(function (item) {\n          if (item.id === foundItem.id) {\n            return Object.assign({}, item, {\n              quantity: item.quantity - 1\n            });\n          } else {\n            return item;\n          }\n        }),\n        total: state.cart.total - item.price\n      }; //console.log(`NewCart after remove: ${JSON.stringify(newCart)}`)\n    } else {\n      // only 1 item matchng the id in the cart so remove the whole item\n      console.log(\"Try remove item \".concat(JSON.stringify(foundItem))); //find the index of the item matching the id of foundItem and splice it out\n\n      var index = items.findIndex(function (i) {\n        return i.id === foundItem.id;\n      });\n      items.splice(index, 1); //not sure if this is a problem with React to uopdate item directly\n\n      var newCart = {\n        items: items,\n        total: state.cart.total - item.price\n      };\n    }\n\n    setState({\n      cart: newCart\n    });\n  };\n\n  return (//app.js provides the values for this contxt. Otherwise it's empty values\n    __jsx(AppContext.Provider, {\n      value: {\n        cart: state.cart,\n        addItem: addItem,\n        removeItem: removeItem,\n        isAuthenticated: false,\n        user: null,\n        setUser: function setUser() {}\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 5\n      }\n    }, __jsx(Head, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 7\n      }\n    }, __jsx(\"link\", {\n      rel: \"stylesheet\",\n      href: \"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\",\n      integrity: \"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\",\n      crossOrigin: \"anonymous\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }\n    })), __jsx(Layout, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 7\n      }\n    }, __jsx(Component, _extends({}, pageProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }\n    }))))\n  );\n}\n\n_s(MyApp, \"0uoHFV+lB8Ch75c38zIt7ZJVV+U=\");\n\n_c = MyApp;\nexport default MyApp;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyApp\");","map":{"version":3,"sources":["/Users/ilyaflaks/Desktop/Boot Camps/MIT xPro/back-end-part3/week28/setting-up-graphql-with-apollo_starter/pages/_app.js"],"names":["useContext","useState","Head","AppContext","Home","Layout","Cookie","MyApp","props","cart","addItem","removeItem","user","setUser","state","setState","Component","pageProps","item","items","foundItem","length","find","i","id","console","log","JSON","stringify","temp","parse","quantity","newCart","total","price","map","Object","assign","index","findIndex","splice","isAuthenticated"],"mappings":"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","sourcesContent":["import { useContext, useState } from \"react\";\nimport Head from \"next/head\";\nimport AppContext from \"../components/context\";\nimport Home from \"./index\";\nimport Layout from \"../components/layout\";\nimport Cookie from \"js-cookie\";\n\nfunction MyApp(props) {\n  var { cart, addItem, removeItem, user, setUser } = useContext(AppContext);\n  const [state, setState] = useState({ cart: cart });\n  const { Component, pageProps } = props;\n\n  ////Not called anywhere yet\n  setUser = (user) => {\n    setState({ user });\n  };\n\n  ////\n  addItem = (item) => {\n    let { items } = state.cart;\n    //state stores the items and the qty locally in state.cart = items\n    //check for item already in cart\n    //if not in cart, add item if item is found increase quanity ++\n    let foundItem = true;\n    if (items.length > 0) {\n      foundItem = items.find((i) => i.id === item.id);\n      //if cart is not empty, search for item matching the id of the item that called addItem\n      //assign it to foundItem. If none found foundItem becomes false\n      if (!foundItem) foundItem = false;\n    } else {\n      //if cart is empty:\n      foundItem = false;\n    }\n    console.log(`Found Item value: ${JSON.stringify(foundItem)}`);\n    // if item is not new, add to cart, set quantity to 1\n    if (!foundItem) {\n      //foundItem is false when cart is empty or when item.id doesnt match whats in it\n      //set quantity property to 1\n\n      let temp = JSON.parse(JSON.stringify(item));\n\n      //you can't set item quantity directly because this is React\n      temp.quantity = 1;\n      var newCart = {\n        items: [...state.cart.items, temp], //copy of item is added to cart with QTY of 1\n        total: state.cart.total + item.price,\n      };\n      setState({ cart: newCart }); //state updated\n      console.log(`Total items: ${JSON.stringify(newCart)}`);\n    } else {\n      //foundItem is truthy, meaning there are things in the cart and the item added matches whats in the cart\n      // we already have it so just increase quantity ++\n      console.log(`Total so far:  ${state.cart.total}`);\n      //not sure if newCart is in scope of this else statement but it works...\n      newCart = {\n        items: items.map((item) => {\n          //map through the items in the cart, match the id's\n          if (item.id === foundItem.id) {\n            //Object.assign merges the obejcts after {} with same props into a new obj,\n            //in this case it will copy item, and update it's quantity to be +1 of what it was\n            //this will essentially return a new object with an update QTY\n            return Object.assign({}, item, { quantity: item.quantity + 1 });\n          } else {\n            //not sure if this condition is necessary since we are already in the else statement for the truthiness of foundItem\n            return item;\n          }\n        }),\n        total: state.cart.total + item.price,\n      };\n    }\n    setState({ cart: newCart }); // problem is this is not updated yet\n    console.log(`state reset to cart:${JSON.stringify(state)}`);\n  };\n  removeItem = (item) => {\n    //similar to above, items is whats already in the cart\n    let { items } = state.cart;\n    //check for item already in cart\n    const foundItem = items.find((i) => i.id === item.id);\n    //find the item for which id of the item added matches\n    if (foundItem.quantity > 1) {\n      //if item added is already in the cart and the QTY is greater than 1, map through the items\n      var newCart = {\n        //key \"items\" is a cope of the item matching the id with a QTY increased by one.\n        items: items.map((item) => {\n          if (item.id === foundItem.id) {\n            return Object.assign({}, item, { quantity: item.quantity - 1 });\n          } else {\n            return item;\n          }\n        }),\n        total: state.cart.total - item.price,\n      };\n      //console.log(`NewCart after remove: ${JSON.stringify(newCart)}`)\n    } else {\n      // only 1 item matchng the id in the cart so remove the whole item\n      console.log(`Try remove item ${JSON.stringify(foundItem)}`);\n      //find the index of the item matching the id of foundItem and splice it out\n      const index = items.findIndex((i) => i.id === foundItem.id);\n      items.splice(index, 1);\n      //not sure if this is a problem with React to uopdate item directly\n      var newCart = { items: items, total: state.cart.total - item.price };\n    }\n    setState({ cart: newCart });\n  };\n\n  return (\n    //app.js provides the values for this contxt. Otherwise it's empty values\n    <AppContext.Provider\n      value={{\n        cart: state.cart,\n        addItem: addItem,\n        removeItem: removeItem,\n        isAuthenticated: false,\n        user: null,\n        setUser: () => {},\n      }}\n    >\n      <Head>\n        <link\n          rel=\"stylesheet\"\n          href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\"\n          integrity=\"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\"\n          crossOrigin=\"anonymous\"\n        />\n      </Head>\n\n      <Layout>\n        <Component {...pageProps} />\n      </Layout>\n    </AppContext.Provider>\n  );\n}\n\nexport default MyApp;\n"]},"metadata":{},"sourceType":"module"}