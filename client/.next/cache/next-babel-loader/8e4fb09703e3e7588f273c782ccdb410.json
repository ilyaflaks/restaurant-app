{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useContext, useState } from \"react\";\nimport Head from \"next/head\";\nimport AppContext from \"../components/context\";\nimport Home from \"./index\";\nimport Layout from \"../components/layout\";\nimport Cookie from \"js-cookie\";\n\nfunction MyApp(props) {\n  var _useContext = useContext(AppContext),\n      cart = _useContext.cart,\n      addItem = _useContext.addItem,\n      removeItem = _useContext.removeItem,\n      user = _useContext.user,\n      setUser = _useContext.setUser;\n\n  var _useState = useState({\n    cart: cart\n  }),\n      state = _useState[0],\n      setState = _useState[1];\n\n  var Component = props.Component,\n      pageProps = props.pageProps; ////Not called anywhere yet\n\n  setUser = function setUser(user) {\n    setState({\n      user: user\n    });\n  }; ////empty function exported from context. Defined here\n\n\n  addItem = function addItem(item) {\n    var items = state.cart.items; //state stores the items and the qty locally in state.cart = items\n    //check for item already in cart\n    //if not in cart, add item if item is found increase quanity ++\n\n    var foundItem = true;\n\n    if (items.length > 0) {\n      foundItem = items.find(function (i) {\n        return i.id === item.id;\n      }); //if cart is not empty, search for item matching the id of the item that called addItem\n      //assign it to foundItem. If none found foundItem becomes false\n\n      if (!foundItem) foundItem = false;\n    } else {\n      //if cart is empty:\n      foundItem = false;\n    }\n\n    console.log(\"Found Item value: \".concat(JSON.stringify(foundItem))); // if item is not new, add to cart, set quantity to 1\n\n    if (!foundItem) {\n      //foundItem is false when cart is empty or when item.id doesnt match whats in it\n      //set quantity property to 1\n      var temp = JSON.parse(JSON.stringify(item)); //you can't set item quantity directly because this is React\n\n      temp.quantity = 1;\n      var newCart = {\n        items: [].concat(_toConsumableArray(state.cart.items), [temp]),\n        //copy of item is added to cart with QTY of 1\n        total: state.cart.total + item.price\n      };\n      setState({\n        cart: newCart\n      }); //state updated\n\n      console.log(\"Total items: \".concat(JSON.stringify(newCart)));\n    } else {\n      //foundItem is truthy, meaning there are things in the cart and the item added matches whats in the cart\n      // we already have it so just increase quantity ++\n      console.log(\"Total so far:  \".concat(state.cart.total)); //not sure if newCart is in scope of this else statement but it works...\n\n      newCart = {\n        items: items.map(function (item) {\n          //map through the items in the cart, match the id's\n          if (item.id === foundItem.id) {\n            //Object.assign merges the obejcts after {} with same props into a new obj,\n            //in this case it will copy item, and update it's quantity to be +1 of what it was\n            //this will essentially return a new object with an update QTY\n            return Object.assign({}, item, {\n              quantity: item.quantity + 1\n            });\n          } else {\n            //not sure if this condition is necessary since we are already in the else statement for the truthiness of foundItem\n            return item;\n          }\n        }),\n        total: state.cart.total + item.price\n      };\n    }\n\n    setState({\n      cart: newCart\n    }); // problem is this is not updated yet\n\n    console.log(\"state reset to cart:\".concat(JSON.stringify(state)));\n  }; ////removeItem is also in the context with no functionality\n\n\n  removeItem = function removeItem(item) {\n    //similar to above, items is whats already in the cart\n    var items = state.cart.items; //check for item already in cart\n\n    var foundItem = items.find(function (i) {\n      return i.id === item.id;\n    }); //find the item for which id of the item added matches\n\n    if (foundItem.quantity > 1) {\n      //if item added is already in the cart and the QTY is greater than 1, map through the items\n      var newCart = {\n        //key \"items\" is a copy of the item matching the id with a QTY increased by one.\n        items: items.map(function (item) {\n          if (item.id === foundItem.id) {\n            return Object.assign({}, item, {\n              quantity: item.quantity - 1\n            });\n          } else {\n            return item;\n          }\n        }),\n        total: state.cart.total - item.price\n      }; //console.log(`NewCart after remove: ${JSON.stringify(newCart)}`)\n    } else {\n      // only 1 item matchng the id in the cart so remove the whole item\n      console.log(\"Try remove item \".concat(JSON.stringify(foundItem))); //find the index of the item matching the id of foundItem and splice it out\n\n      var index = items.findIndex(function (i) {\n        return i.id === foundItem.id;\n      });\n      items.splice(index, 1); //not sure if this is a problem with React to uopdate item directly\n\n      var newCart = {\n        items: items,\n        total: state.cart.total - item.price\n      };\n    }\n\n    setState({\n      cart: newCart\n    });\n  };\n\n  return (//app.js provides the values for this contxt. Otherwise it's empty values. Cart and Dishes all import this context\n    //Cart accesses  cart, addItem, removeItem, Dishes accesses addItem\n    __jsx(AppContext.Provider, {\n      value: {\n        cart: state.cart,\n        addItem: addItem,\n        removeItem: removeItem,\n        isAuthenticated: false,\n        user: null,\n        setUser: function setUser() {}\n      }\n    }, __jsx(Head, null, __jsx(\"link\", {\n      rel: \"stylesheet\",\n      href: \"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\",\n      integrity: \"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\",\n      crossOrigin: \"anonymous\"\n    })), __jsx(Layout, null, __jsx(Component, pageProps)))\n  );\n}\n\nexport default MyApp;","map":null,"metadata":{},"sourceType":"module"}